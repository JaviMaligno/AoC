I understand your request. You want to trace the path of all the beams and count the number of tiles visited by the beams when no new tiles are visited. This is a complex task that involves programming and algorithmic logic. Here's a Python code snippet that could help you achieve this:

```python
def trace_beam(grid):
    directions = {'right': (0, 1), 'down': (1, 0), 'left': (0, -1), 'up': (-1, 0)}
    mirror_reflections = {'/': {'up': 'right', 'right': 'up', 'down': 'left', 'left': 'down'},
                          '\\': {'up': 'left', 'left': 'up', 'down': 'right', 'right': 'down'}}
    splitter_reflections = {'|': {'right': ['up', 'down'], 'left': ['up', 'down']},
                            '-': {'up': ['right', 'left'], 'down': ['right', 'left']}}
    visited = set()
    beams = [(0, 0, 'right')]

    while beams:
        new_beams = []
        for x, y, direction in beams:
            while 0 <= x < len(grid) and 0 <= y < len(grid[0]):
                if (x, y) not in visited:
                    visited.add((x, y))
                    if grid[x][y] in '/\\':
                        direction = mirror_reflections[grid[x][y]][direction]
                    elif grid[x][y] in '|-':
                        if direction in splitter_reflections[grid[x][y]]:
                            for new_direction in splitter_reflections[grid[x][y]][direction]:
                                new_beams.append((x, y, new_direction))
                            break
                dx, dy = directions[direction]
                x += dx
                y += dy
        beams = new_beams
    return len(visited)

grid = [
    '.|...\\....',
    '|.-.\\.....',
    '.....|-...',
    '........|.',
    '..........',
    '.........\\',
    '..../.\\\\..',
    '.-.-/..|..',
    '.|....-|.\\',
    '..//.|....'
]
print(trace_beam(grid))
```

This Python code defines a function `trace_beam` that takes a grid as input and returns the number of tiles visited by the beams. It uses a while loop to trace the path of all beams according to the rules you provided. When a beam hits a mirror, it changes direction according to the `mirror_reflections` dictionary. When a beam hits a splitter, it splits into two beams in the directions specified by the `splitter_reflections` dictionary. The set `visited` keeps track of all visited tiles.

Please note that this is a simple implementation and might need adjustments based on the specific requirements of your problem. Always remember to test the code thoroughly with various inputs to ensure it works as expected. ðŸ˜Š

Source: Conversation with Bing, 17/12/2023
(1) github.com. https://github.com/stamp465/01204111-Computer-and-Programming/tree/49d08407e9d2f107209961b6dfa7a083dbdb5170/lab12%2F08.py.